name: Build and Publish

on:
  pull_request:
    branches:
        - main
        - develop
    types:
        - opened
        - edited
        - synchronize

  push:
    branches:
        - main
        - develop
        - "ci/*"


env:
  CONTAINER_NAME: "saas-workspace"

  CONTAINER_REGISTRY: "ghcr.io"
  CONTAINER_USER: "${{ github.repository_owner }}"
  CONTAINER_REGISTRY_PASSWORD: "${{ github.token }}"


jobs:
  check-if-needed:
    runs-on: ubuntu-latest

    if: ${{ !startsWith(github.event.head_commit.message, 'CI-Automation-Update:') }}

    outputs:
      isReleasable: ${{ steps.evaluate.outputs.result }}

    steps:
      - name: Prevent pointless tests
        run: |
          echo "This should prevent unnecessary runs"
          echo "Save compute power, save the Planet"

      - name: Evaluate Branches
        id: evaluate
        run: |
          result=${{ 
              contains(github.ref, 'refs/heads/main') ||
              contains(github.ref, 'refs/heads/develop') ||
              contains(github.ref, 'refs/heads/ci')
          }}
          
          echo "Software will be released: $result"
          
          echo "result=$result" >> "$GITHUB_OUTPUT"


  setup-images:
    runs-on: ubuntu-latest

    needs:
      - check-if-needed

    outputs:
      imageTag: ${{ steps.extract-image-tag.outputs.imageTag }}
      imageTagCi: ${{ steps.extract-image-tag.outputs.imageTagCi }}

    steps:
      # https://docs.github.com/en/actions/using-jobs/defining-outputs-for-jobs
      # https://stackoverflow.com/questions/57968497/how-do-i-set-an-env-var-with-a-bash-expression-in-github-actions
      - name: Extract image Tag
        id: extract-image-tag
        run: |
          branchName=${{ env.SOURCE_REPO }}
          
          base=$(echo $branchName | tr '/' '-' | tr '_' '-' )
          echo "set default to formatted branch: $base"
          
          echo "check if branch is main: ${{ contains(github.ref, 'refs/heads/main') }}"
          if [[ ${{ contains(github.ref, 'refs/heads/main') }} == 'true' ]]; then base='stable'; fi

          echo "check if branch is develop: ${{ contains(github.ref, 'refs/heads/develop') }}"
          if [[ ${{ contains(github.ref, 'refs/heads/develop') }} == 'true' ]]; then base='develop'; fi
          
          echo "check if branch is ci: ${{ contains(github.ref, 'refs/heads/ci') }}"
          if [[ ${{ contains(github.ref, 'refs/heads/ci') }} == 'true' ]]; then base='unstable'; fi
          
          
          hash=$(echo ${{ github.sha }} | cut -c1-10)
          baseCi=$base-${{ github.run_number }}-$hash

          echo "using image Tag: $base"
          echo "using image Tag: $baseCi"
          
          echo "IMAGE_TAG=$base" >> "$GITHUB_ENV"
          echo "IMAGE_TAG_CI=$baseCi" >> "$GITHUB_ENV"
          echo "imageTag=$base" >> "$GITHUB_OUTPUT"
          echo "imageTagCi=$baseCi" >> "$GITHUB_OUTPUT"


  build:
    runs-on: ubuntu-latest

    needs:
      - check-if-needed
      - setup-images

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Kaniko build
        uses: aevea/action-kaniko@master
        with:
          image: "${{ env.CONTAINER_NAME }}"
          registry: "${{ env.CONTAINER_REGISTRY }}"
          username: "${{ env.CONTAINER_REGISTRY_USER }}"
          password: "${{ env.CONTAINER_REGISTRY_PASSWORD }}"
          tag: "${{ needs.setup-images.outputs.imageTagCi }}"
          build_file: Dockerfile


  publish:

    runs-on: docker
    
    needs:
      - check-if-needed
      - setup-images
      - build

    if: |
      always() &&
      needs.build.result == 'success' &&
      needs.check-if-needed.outputs.isReleasable == 'true'
    
    steps:
      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Login to Container Registry
        uses: docker/login-action@v3
        with:
          registry: "${{ env.CONTAINER_REGISTRY }}"
          username: "${{ env.CONTAINER_REGISTRY_USER }}"
          password: "${{ env.CONTAINER_REGISTRY_PASSWORD }}"

      - name: Show Images
        run: |
          echo "Temp Image: ${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }}:${{ needs.setup-images.outputs.imageTagCi }}"
          echo "Release Image: ${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }}:${{ needs.setup-images.outputs.imageTag }}"
      
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: '${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }}:${{ needs.setup-images.outputs.imageTagCi }}'
          format: 'table'
          exit-code: '1'
          ignore-unfixed: true
          vuln-type: 'os,library'
          severity: 'CRITICAL,HIGH'
          scanners: "vuln"
        env:
          TRIVY_USERNAME: "${{ env.CONTAINER_REGISTRY_USER }}"
          TRIVY_PASSWORD: "${{ env.CONTAINER_REGISTRY_PASSWORD }}"

      - name: Push image to GHCR
        run: |
          docker buildx imagetools create \
            --tag ${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }}:${{ needs.setup-images.outputs.imageTag }} \
            ${{ env.CONTAINER_REGISTRY }}/${{ env.CONTAINER_NAME }}:${{ needs.setup-images.outputs.imageTagCi }}

